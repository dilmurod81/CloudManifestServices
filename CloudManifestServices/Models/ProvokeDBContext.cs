// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CloudManifestServices.Models
{
    public partial class ProvokeDBContext : DbContext
    {
        public ProvokeDBContext()
        {
        }

        public ProvokeDBContext(DbContextOptions<ProvokeDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AAllRtmetricsLogsStatusUnified> AAllRtmetricsLogsStatusUnified { get; set; }
        public virtual DbSet<ADiagnosticLogCategories> ADiagnosticLogCategories { get; set; }
        public virtual DbSet<AMetricPerResourceType> AMetricPerResourceType { get; set; }
        public virtual DbSet<AllRtlogsStatus> AllRtlogsStatus { get; set; }
        public virtual DbSet<AllRtmetricsLogsStatus> AllRtmetricsLogsStatus { get; set; }
        public virtual DbSet<AllRtmetricsLogsStatusUnified> AllRtmetricsLogsStatusUnified { get; set; }
        public virtual DbSet<AllRtmetricsStatus> AllRtmetricsStatus { get; set; }
        public virtual DbSet<ChangeLogs> ChangeLogs { get; set; }
        public virtual DbSet<ChangeLogsHistorical> ChangeLogsHistorical { get; set; }
        public virtual DbSet<ChangeLogsHistoricalAcrossClouds> ChangeLogsHistoricalAcrossClouds { get; set; }
        public virtual DbSet<ChangeLogsHistoricalAcrossCloudsNamm> ChangeLogsHistoricalAcrossCloudsNamm { get; set; }
        public virtual DbSet<ChangeLogsHistoricalNamm> ChangeLogsHistoricalNamm { get; set; }
        public virtual DbSet<ChangeMetrics> ChangeMetrics { get; set; }
        public virtual DbSet<ChangeMetricsHistorical> ChangeMetricsHistorical { get; set; }
        public virtual DbSet<ChangeMetricsHistoricalAcrossClouds> ChangeMetricsHistoricalAcrossClouds { get; set; }
        public virtual DbSet<ChangeMetricsHistoricalAcrossCloudsNamm> ChangeMetricsHistoricalAcrossCloudsNamm { get; set; }
        public virtual DbSet<ChangeMetricsHistoricalNamm> ChangeMetricsHistoricalNamm { get; set; }
        public virtual DbSet<Cloud> Cloud { get; set; }
        public virtual DbSet<CosmosDbcaseResults> CosmosDbcaseResults { get; set; }
        public virtual DbSet<Dashboard> Dashboard { get; set; }
        public virtual DbSet<DashboardIcM> DashboardIcM { get; set; }
        public virtual DbSet<DashboardKusto> DashboardKusto { get; set; }
        public virtual DbSet<DashboardManifest> DashboardManifest { get; set; }
        public virtual DbSet<DashboardNamm> DashboardNamm { get; set; }
        public virtual DbSet<DiagnosticLogCategories> DiagnosticLogCategories { get; set; }
        public virtual DbSet<DiagnosticLogCategoriesNamm> DiagnosticLogCategoriesNamm { get; set; }
        public virtual DbSet<DiagnosticLogCategoriesPkviolation> DiagnosticLogCategoriesPkviolation { get; set; }
        public virtual DbSet<DiagnosticLogCategoriesPkviolationNamm> DiagnosticLogCategoriesPkviolationNamm { get; set; }
        public virtual DbSet<DiagnosticLogCategoriesPrevious> DiagnosticLogCategoriesPrevious { get; set; }
        public virtual DbSet<DiagnosticLogCategoriesPreviousNamm> DiagnosticLogCategoriesPreviousNamm { get; set; }
        public virtual DbSet<ErrorType> ErrorType { get; set; }
        public virtual DbSet<HasLogsYnType> HasLogsYnType { get; set; }
        public virtual DbSet<HasMetricsYnType> HasMetricsYnType { get; set; }
        public virtual DbSet<Incident> Incident { get; set; }
        public virtual DbSet<IncidentDetail> IncidentDetail { get; set; }
        public virtual DbSet<KustoServiceTree> KustoServiceTree { get; set; }
        public virtual DbSet<ManifestManagement> ManifestManagement { get; set; }
        public virtual DbSet<ManifestManagementOwner> ManifestManagementOwner { get; set; }
        public virtual DbSet<ManifestRp> ManifestRp { get; set; }
        public virtual DbSet<ManifestRt> ManifestRt { get; set; }
        public virtual DbSet<MetricsLogsPersistentParameters> MetricsLogsPersistentParameters { get; set; }
        public virtual DbSet<MetricsLogsPersistentParametersNamm> MetricsLogsPersistentParametersNamm { get; set; }
        public virtual DbSet<MetricsPerResourceType> MetricsPerResourceType { get; set; }
        public virtual DbSet<MetricsPerResourceTypeNamm> MetricsPerResourceTypeNamm { get; set; }
        public virtual DbSet<MetricsPerResourceTypePkviolation> MetricsPerResourceTypePkviolation { get; set; }
        public virtual DbSet<MetricsPerResourceTypePkviolationNamm> MetricsPerResourceTypePkviolationNamm { get; set; }
        public virtual DbSet<MetricsPerResourceTypePrevious> MetricsPerResourceTypePrevious { get; set; }
        public virtual DbSet<MetricsPerResourceTypePreviousNamm> MetricsPerResourceTypePreviousNamm { get; set; }
        public virtual DbSet<NammRprt> NammRprt { get; set; }
        public virtual DbSet<NammRt> NammRt { get; set; }
        public virtual DbSet<OperationStatus> OperationStatus { get; set; }
        public virtual DbSet<ProcessControl> ProcessControl { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<Source> Source { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ChangeLogsHistorical>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.CategoryTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeLogsHistoricalAcrossClouds>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.CategoryTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeLogsHistoricalAcrossCloudsNamm>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.CategoryTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeLogsHistoricalNamm>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.CategoryTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeMetricsHistorical>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.MetricTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeMetricsHistoricalAcrossClouds>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.MetricTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeMetricsHistoricalAcrossCloudsNamm>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.MetricTotal, e.ProcessDate });
            });

            modelBuilder.Entity<ChangeMetricsHistoricalNamm>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderTypeTotal, e.MetricTotal, e.ProcessDate });
            });

            modelBuilder.Entity<Cloud>(entity =>
            {
                entity.Property(e => e.Cloud1).IsFixedLength();

                entity.Property(e => e.Description).IsFixedLength();
            });

            modelBuilder.Entity<ErrorType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<HasLogsYnType>(entity =>
            {
                entity.Property(e => e.Type).ValueGeneratedNever();
            });

            modelBuilder.Entity<HasMetricsYnType>(entity =>
            {
                entity.Property(e => e.Type).ValueGeneratedNever();
            });

            modelBuilder.Entity<Incident>(entity =>
            {
                entity.HasKey(e => new { e.Source, e.ResourceType, e.ErrorType, e.Week, e.IcMincidentId });
            });

            modelBuilder.Entity<IncidentDetail>(entity =>
            {
                entity.HasKey(e => new { e.Source, e.ResourceType, e.ErrorType, e.Week, e.Value, e.IcMincidentId });
            });

            modelBuilder.Entity<KustoServiceTree>(entity =>
            {
                entity.HasKey(e => new { e.ResourceProvider, e.ResourceTypeNoRp, e.ServiceId });
            });

            modelBuilder.Entity<ManifestManagement>(entity =>
            {
                entity.HasKey(e => new { e.ResourceProvider, e.ResourceTypeNoRp });
            });

            modelBuilder.Entity<ManifestManagementOwner>(entity =>
            {
                entity.HasKey(e => new { e.ResourceProvider, e.ResourceTypeNoRp, e.Owner });
            });

            modelBuilder.Entity<ManifestRt>(entity =>
            {
                entity.HasKey(e => new { e.ResourceProvider, e.ResourceTypeNoRp });
            });

            modelBuilder.Entity<MetricsLogsPersistentParameters>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderType, e.MetricLog, e.Type });
            });

            modelBuilder.Entity<MetricsLogsPersistentParametersNamm>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProviderType, e.MetricLog, e.Type });
            });

            modelBuilder.Entity<NammRprt>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceProvider, e.ResourceType });
            });

            modelBuilder.Entity<NammRt>(entity =>
            {
                entity.HasKey(e => new { e.Cloud, e.ResourceType });
            });

            modelBuilder.Entity<OperationStatus>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProcessControl>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Services>(entity =>
            {
                entity.Property(e => e.DateEntered).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}